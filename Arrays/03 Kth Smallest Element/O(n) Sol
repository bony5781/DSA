class Solution {

    public void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public int partition(int[] nums, int si, int ei){
        int pivot = nums[ei];
        int i = si - 1;
        for(int j = si; j < ei; j++){
            if(nums[j] <= pivot){
                i++;
                swap(nums,i,j);
            }
        }
        i++;
        swap(nums,ei,i);
        return i;
    }


    public int quickSelect(int[] nums, int si, int ei, int k){
        if(si > ei){
            return 0;
        }
        int p = partition(nums,si,ei);
        if(p < k) {
            return quickSelect(nums,p+1,ei,k);
        }else if(p > k){
            return quickSelect(nums,si,p-1,k);
        }else{
            return nums[p];
        }
    }

    public int findKthLargest(int[] nums, int k) {
        if(nums.length==1) return nums[0];
        k = nums.length - k;
        return quickSelect(nums, 0, nums.length - 1, k);
    }
}