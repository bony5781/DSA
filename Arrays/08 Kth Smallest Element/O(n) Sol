class Solution {

    public void swap(int arr[], int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public int partition(int nums[], int low, int high){
        int i = low - 1;
        int pivot = nums[high];

        for(int j = low; j < high; j++){
            if(nums[j] <= pivot){
                i++;
                swap(nums, i, j);
            }
        }

        i++;
        swap(nums, i, high);
        return i;
    }

    public int quickSelect(int nums[], int low, int high, int k){
        int res = partition(nums, low, high);

        if(res == k){
            return nums[res];
        }else if(res > k){
            return quickSelect(nums, low, res - 1, k);
        }else if(res < k){
            return quickSelect(nums, res + 1, high, k);
        }

        return -1;
    }

    public int findKthLargest(int[] nums, int k) {
        int n = nums.length;
        k = n - k;
        return quickSelect(nums, 0, n-1, k);
    }
}